-- Load UI Library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/x2zu/OPEN-SOURCE-UI-ROBLOX/refs/heads/main/X2ZU%20UI%20ROBLOX%20OPEN%20SOURCE/DummyUi-leak-by-x2zu/fetching-main/Tools/Framework.luau"))()

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ToolModule = loadstring(game:HttpGet("https://raw.githubusercontent.com/GoldDoomOwner/Gold-Doom-Script/refs/heads/main/Tool%20Giver"))()
local UserInputService = game:GetService("UserInputService")

local Custom_PowerTools = {"Awaken", "Oblivious","Titanium", "Drug Abused", "Soul Monarch", "Creation", "AkazaDash", "ESPER RAGE", "GOLDEN MONARCH", "VOID WALKER", "STORM BREAKER", "CRIMSON REAPER", "CELESTIAL WRATH", "SHADOW ASSASSIN", "INFERNO KING", "FROZEN DOMAIN", "GRAVITY TITAN", "PLASMA SURGE", "TOXIC VENOM", "TIME WARP", "CRYSTAL FORTRESS", "BLOOD MOON", "DRAGON SPIRIT", "NEBULA VOID", "EARTH SHAKER", "WIND DANCER", "CHAOS BREAKER"}

if localPlayer then
    local textChannel = TextChatService:WaitForChild("TextChannels"):WaitForChild("RBXGeneral")
    textChannel:DisplaySystemMessage("[DAHEN HUB]: LOADING SCRIPT...")
    task.wait()
    textChannel:DisplaySystemMessage("[DAHEN HUB]: DAHEN HUB | INK GAMES")
    task.wait()
    textChannel:DisplaySystemMessage("[DAHEN HUB]: LOADED")
end

-- Create main window
local Window = Library:Window({
    Title = "DAHEN HUB INK GAME",
    Desc = "DAHEN HUB TESTING | INK GAMES\nhttps://discord.gg/golddoom, https://discord.gg/ringta",
    Icon = 105059922903197,
    Theme = "Dark",
    Config = {
        Keybind = Enum.KeyCode.LeftControl,
        Size = UDim2.new(0, 500, 0, 400)
    },
    CloseUIButton = {
        Enabled = true,
        Text = "DAHEN HUB"
    }
})

Window:Notify({
    Title = "Test",
    Desc = "Loading",
    Time = 4
})

-- Create tabs
local MainTab = Window:Tab({Title = "Main", Icon = "home"})
local PlayerTab = Window:Tab({Title = "Player", Icon = "user"})
local GameTab = Window:Tab({Title = "Game", Icon = "gamepad"})
local MiscTab = Window:Tab({Title = "Misc", Icon = "settings"})

-- Player Teleport System Variables
local selectedPlayer = nil

-- Function to get all players except local player
local function CreateGlassBridgeCover()
    local glassHolder = game.Workspace:FindFirstChild("GlassBridge")
    if not glassHolder then
        warn("GlassBridge not found in Workspace")
        return
    end

    glassHolder = glassHolder:FindFirstChild("GlassHolder")
    if not glassHolder then
        warn("GlassHolder not found in GlassBridge")
        return
    end

    local models = glassHolder:GetChildren()

    if #models == 0 then
        warn("No models found in GlassHolder")
        return
    end

    local minX, minY, minZ = math.huge, math.huge, math.huge
    local maxX, maxY, maxZ = -math.huge, -math.huge, -math.huge

    for _, model in ipairs(models) do
        if model:IsA("Model") or model:IsA("BasePart") then
            local cframe, size

            if model:IsA("Model") then
                cframe, size = model:GetBoundingBox()
            else
                cframe = model.CFrame
                size = model.Size
            end

            local halfSize = size / 2
            local corners = {
                cframe * CFrame.new(-halfSize.X, -halfSize.Y, -halfSize.Z),
                cframe * CFrame.new(halfSize.X, -halfSize.Y, -halfSize.Z),
                cframe * CFrame.new(-halfSize.X, halfSize.Y, -halfSize.Z),
                cframe * CFrame.new(halfSize.X, halfSize.Y, -halfSize.Z),
                cframe * CFrame.new(-halfSize.X, -halfSize.Y, halfSize.Z),
                cframe * CFrame.new(halfSize.X, -halfSize.Y, halfSize.Z),
                cframe * CFrame.new(-halfSize.X, halfSize.Y, halfSize.Z),
                cframe * CFrame.new(halfSize.X, halfSize.Y, halfSize.Z),
            }

            for _, corner in ipairs(corners) do
                local pos = corner.Position
                minX = math.min(minX, pos.X)
                minY = math.min(minY, pos.Y)
                minZ = math.min(minZ, pos.Z)
                maxX = math.max(maxX, pos.X)
                maxY = math.max(maxY, pos.Y)
                maxZ = math.max(maxZ, pos.Z)
            end
        end
    end

    local coverPart = Instance.new("Part")
    coverPart.Name = "GlassBridgeCover"
    coverPart.Anchored = true
    coverPart.CanCollide = true
    coverPart.Material = Enum.Material.SmoothPlastic
    coverPart.Color = Color3.fromRGB(100, 100, 255)
    coverPart.Transparency = 0.3

    local sizeX = maxX - minX + 2
    local sizeY = maxY - minY + 2
    local sizeZ = maxZ - minZ + 2

    local centerX = (minX + maxX) / 2
    local centerY = (minY + maxY) / 2
    local centerZ = (minZ + maxZ) / 2

    coverPart.Size = Vector3.new(sizeX, sizeY, sizeZ)
    coverPart.CFrame = CFrame.new(centerX, centerY, centerZ)
    coverPart.Parent = workspace

    print("Glass Bridge Cover created!")
    return coverPart
end

local function getPlayerList()
    local playerList = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer then
            table.insert(playerList, player.DisplayName)
        end
    end
    return #playerList > 0 and playerList or {"No Players"}
end

local function getPlayerByDisplayName(displayName)
    for _, player in pairs(Players:GetPlayers()) do
        if player.DisplayName == displayName then
            return player
        end
    end
    return nil
end

local function teleportToPlayer(targetPlayer)
    if not targetPlayer or not targetPlayer.Character then
        return
    end

    local targetRoot = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    local localRoot = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")

    if targetRoot and localRoot then
        localRoot.CFrame = targetRoot.CFrame * CFrame.new(0, 0, 3)
    end
end

local function teleportToRandomPlayer()
    local players = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character then
            table.insert(players, player)
        end
    end

    if #players > 0 then
        local randomPlayer = players[math.random(1, #players)]
        teleportToPlayer(randomPlayer)
    end
end

-- MAIN TAB CONTENT
MainTab:Section({Title = "Custom Emotes & Powers"})

MainTab:Button({
    Title = "Custom Emotes",
    Desc = "Load custom emotes script",
    Callback = function()
        loadstring(game:HttpGet("https://pastebin.com/raw/1p6xnBNf"))()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/GoldDoomOwner/Gold-Doom-Script/refs/heads/main/jerk"))()
    end
})

MainTab:Button({
    Title = "Custom Emotes 2",
    Desc = "Load additional custom emotes",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local isR6 = character:FindFirstChild("Torso") ~= nil

        local function showNotification(message)
            local notificationGui = Instance.new("ScreenGui")
            notificationGui.Name = "NotificationGui"
            notificationGui.Parent = game.CoreGui

            local notificationFrame = Instance.new("Frame")
            notificationFrame.Size = UDim2.new(0, 300, 0, 50)
            notificationFrame.Position = UDim2.new(0.5, -150, 1, -60)
            notificationFrame.AnchorPoint = Vector2.new(0.5, 1)
            notificationFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            notificationFrame.BorderSizePixel = 0
            notificationFrame.Parent = notificationGui

            local uicorner = Instance.new("UICorner")
            uicorner.CornerRadius = UDim.new(0, 10)
            uicorner.Parent = notificationFrame

            local textLabel = Instance.new("TextLabel")
            textLabel.Size = UDim2.new(1, -20, 1, 0)
            textLabel.Position = UDim2.new(0, 10, 0, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.Text = message .. " | by nikos_YT7"
            textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            textLabel.Font = Enum.Font.SourceSansSemibold
            textLabel.TextSize = 18
            textLabel.TextXAlignment = Enum.TextXAlignment.Left
            textLabel.Parent = notificationFrame

            notificationFrame.BackgroundTransparency = 1
            textLabel.TextTransparency = 1

            game:GetService("TweenService"):Create(
                notificationFrame,
                TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
                {BackgroundTransparency = 0}
            ):Play()

            game:GetService("TweenService"):Create(
                textLabel,
                TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
                {TextTransparency = 0}
            ):Play()

            task.delay(5, function()
                game:GetService("TweenService"):Create(
                    notificationFrame,
                    TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.In),
                    {BackgroundTransparency = 1}
                ):Play()

                game:GetService("TweenService"):Create(
                    textLabel,
                    TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.In),
                    {TextTransparency = 1}
                ):Play()

                task.delay(0.5, function()
                    notificationGui:Destroy()
                end)
            end)
        end

        if isR6 then
            showNotification("R6 detected")
        else
            showNotification("R15 detected")
        end

        local gui = Instance.new("ScreenGui")
        gui.Name = "BangGui"
        gui.Parent = game.CoreGui

        local mainFrame = Instance.new("Frame")
        mainFrame.Size = UDim2.new(0, 300, 0, 300)
        mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
        mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
        mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        mainFrame.BorderSizePixel = 0
        mainFrame.Parent = gui

        local uicorner = Instance.new("UICorner")
        uicorner.CornerRadius = UDim.new(0, 20)
        uicorner.Parent = mainFrame

        local title = Instance.new("TextLabel")
        title.Size = UDim2.new(1, -60, 0, 30)
        title.Position = UDim2.new(0, 10, 0, 0)
        title.BackgroundTransparency = 1
        title.Text = "Choose"
        title.TextColor3 = Color3.fromRGB(255, 255, 255)
        title.Font = Enum.Font.SourceSansSemibold
        title.TextSize = 24
        title.TextXAlignment = Enum.TextXAlignment.Left
        title.Parent = mainFrame

        local closeButton = Instance.new("TextButton")
        closeButton.Size = UDim2.new(0, 30, 0, 30)
        closeButton.Position = UDim2.new(1, -40, 0, 0)
        closeButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
        closeButton.Text = "X"
        closeButton.Font = Enum.Font.SourceSansBold
        closeButton.TextSize = 20
        closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        closeButton.Parent = mainFrame

        local closeCorner = Instance.new("UICorner")
        closeCorner.CornerRadius = UDim.new(0, 10)
        closeCorner.Parent = closeButton

        closeButton.MouseButton1Click:Connect(function()
            gui:Destroy()
        end)

        local dragging, dragStart, startPos
        mainFrame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = mainFrame.Position
            end
        end)

        mainFrame.InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - dragStart
                mainFrame.Position = UDim2.new(
                    startPos.X.Scale,
                    startPos.X.Offset + delta.X,
                    startPos.Y.Scale,
                    startPos.Y.Offset + delta.Y
                )
            end
        end)

        mainFrame.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = false
            end
        end)

        local scrollingFrame = Instance.new("ScrollingFrame")
        scrollingFrame.Size = UDim2.new(1, -20, 1, -50)
        scrollingFrame.Position = UDim2.new(0, 10, 0, 40)
        scrollingFrame.BackgroundTransparency = 1
        scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 300)
        scrollingFrame.ScrollBarThickness = 6
        scrollingFrame.Parent = mainFrame

        local layout = Instance.new("UIListLayout")
        layout.Padding = UDim.new(0, 10)
        layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        layout.Parent = scrollingFrame

        local buttons = {
            {name = "Bang V2", r6 = "https://pastebin.com/raw/aPSHMV6K", r15 = "https://pastebin.com/raw/1ePMTt9n"},
            {name = "Get Banged", r6 = "https://pastebin.com/raw/zHbw7ND1", r15 = "https://pastebin.com/raw/7hvcjDnW"},
            {name = "Suck", r6 = "https://pastebin.com/raw/SymCfnAW", r15 = "https://pastebin.com/raw/p8yxRfr4"},
            {name = "Get Suc", r6 = "https://pastebin.com/raw/FPu4e2Qh", r15 = "https://pastebin.com/raw/DyPP2tAF"},
        }

        for _, buttonData in pairs(buttons) do
            local button = Instance.new("TextButton")
            button.Size = UDim2.new(0.8, 0, 0, 40)
            button.BackgroundColor3 = Color3.fromRGB(50, 150, 255)
            button.Text = buttonData.name
            button.Font = Enum.Font.SourceSansBold
            button.TextSize = 20
            button.TextColor3 = Color3.fromRGB(255, 255, 255)
            button.Parent = scrollingFrame

            local uicorner = Instance.new("UICorner")
            uicorner.CornerRadius = UDim.new(0, 10)
            uicorner.Parent = button

            button.MouseButton1Click:Connect(function()
                if isR6 then
                    loadstring(game:HttpGet(buttonData.r6))()
                else
                    loadstring(game:HttpGet(buttonData.r15))()
                end
            end)
        end
    end
})

MainTab:Section({Title = "Power Tools"})

local selectedTool1 = "Awaken"
local selectedTool2 = "Oblivious"

MainTab:Dropdown({
    Title = "Select Tool 1",
    List = Custom_PowerTools,
    Value = "Awaken",
    Callback = function(selected)
        selectedTool1 = selected
        print("Selected tool 1:", selectedTool1)
    end
})

MainTab:Dropdown({
    Title = "Select Tool 2",
    List = Custom_PowerTools,
    Value = "Oblivious",
    Callback = function(selected)
        selectedTool2 = selected
        print("Selected tool 2:", selectedTool2)
    end
})

local customNameInput = MainTab:Textbox({
    Title = "Custom Powers Name",
    Desc = "Enter custom name...",
    Placeholder = "Enter custom name...",
    Value = "",
    ClearTextOnFocus = false,
    Callback = function(text)
        print("Custom name entered:", text)
    end
})

MainTab:Button({
    Title = "Equip Custom Power",
    Desc = "Get tools and change shop UI",
    Callback = function()
        ToolModule:GetTools(selectedTool1, selectedTool2)
        local customName = customNameInput.GetText and customNameInput:GetText() or ""
        local ui = localPlayer.PlayerGui.ShopGui.StoreHolder.Store.PAGES.Powers
        spawn(function()
            while true do
                ui.CurrentlyEquipped.Text = "Currently Equipped: " .. (customName or "")
                task.wait()
            end
        end)
    end
})

MainTab:Section({Title = "Boosts & Powers"})

MainTab:Button({
    Title = "Enable Dash",
    Desc = "Enable faster sprint boost",
    Callback = function()
        localPlayer.Boosts["Faster Sprint"].Value = 5
        local ui = localPlayer.PlayerGui.ShopGui.StoreHolder.Store.PAGES.Boosts
        local Speed = ui["Faster Sprint"]

        spawn(function()
            while true do
                task.wait()
                Speed.BuyButtonRobux.Visible = false
                Speed.BuyButtonCoin.Visible = false
                Speed.ItemLevel.Text = "Current Level (5)"
            end
        end)
    end
})

MainTab:Button({
    Title = "Won Boost",
    Desc = "Enable won boost",
    Callback = function()
        localPlayer.Boosts["Won Boost"].Value = 5
        local ui = localPlayer.PlayerGui.ShopGui.StoreHolder.Store.PAGES.Boosts
        local Speed = ui["Won Boost"]

        spawn(function()
            while true do
                task.wait()
                Speed.BuyButtonRobux.Visible = false
                Speed.BuyButtonCoin.Visible = false
                Speed.ItemLevel.Text = "Current Level (5)"
            end
        end)
    end
})

MainTab:Button({
    Title = "Strength Boost",
    Desc = "Enable damage boost",
    Callback = function()
        localPlayer.Boosts["Damage Boost"].Value = 5
        local ui = localPlayer.PlayerGui.ShopGui.StoreHolder.Store.PAGES.Boosts
        local Speed = ui["Damage Boost"]

        spawn(function()
            while true do
                task.wait()
                Speed.BuyButtonRobux.Visible = false
                Speed.BuyButtonCoin.Visible = false
                Speed.ItemLevel.Text = "Current Level (5)"
            end
        end)
    end
})

MainTab:Button({
    Title = "Equip Phantom Step",
    Desc = "Set Phantom Step power",
    Callback = function()
        localPlayer:SetAttribute("_EquippedPower", "PHANTOM STEP")
    end
})

MainTab:Button({
    Title = "Remove Power",
    Desc = "Clear equipped power",
    Callback = function()
        localPlayer:SetAttribute("_EquippedPower", "")
    end
})

MainTab:Button({
    Title = "Enable Powers",
    Desc = "Enable all powers",
    Callback = function()
        game.Workspace.Values.PowersDisabled.Value = false
    end
})

MainTab:Section({Title = "Gamepasses & Weapons"})

MainTab:Button({
    Title = "Enable All Gamepasses",
    Desc = "Unlock all gamepasses",
    Callback = function()
        Window:Notify({
            Title = "Enabling All Gamepasses",
            Desc = "Loading Script",
            Time = 4
        })
        
        localPlayer:SetAttribute("HasLighter", true)
        localPlayer:SetAttribute("HasPush", true)
        game.Workspace.Values.CanPush.Value = true
        local ui = localPlayer.PlayerGui.ShopGui.StoreHolder.Store.PAGES.Gamepass
        game.Workspace.Values.CanPush.Value = true

        for i, v in pairs(ui:GetChildren()) do
            if v:IsA("TextButton") then
                spawn(function()
                    if v.ItemName.Text == "Revive All" or v.ItemName.Text == "One Time Playable Guard" then
                        print("["..v.ItemName.Text.."] Has Been Blocked")
                        Window:Notify({
                            Title = v.ItemName.Text,
                            Desc = "Blocked To Look Legit",
                            Time = 4
                        })
                    else
                        v.BuyButton.Content.TextLabel.Text = "OWNED"
                        Window:Notify({
                            Title = v.ItemName.Text,
                            Desc = "Giving Gamepass",
                            Time = 4
                        })
                        print("Done ["..v.ItemName.Text.."]")
                    end
                end)
            end
        end
    end
})

MainTab:Button({
    Title = "Select Fork",
    Desc = "Set Fork as weapon",
    Callback = function()
        localPlayer:SetAttribute("WeaponSelected", "Fork")
    end
})

MainTab:Button({
    Title = "Show All Buttons",
    Desc = "Reveal all UI buttons",
    Callback = function()
        local ui = localPlayer.PlayerGui.Buttons.LeftButtons
        for i, v in pairs(ui:GetChildren()) do
            if v:IsA("ImageButton") then
                v.Visible = true
            end
        end
    end
})

-- PLAYER TAB CONTENT
PlayerTab:Section({Title = "Player Teleports"})

local playerOptions = getPlayerList()
local playerDropdownValue = playerOptions[1]

PlayerTab:Dropdown({
    Title = "Player Selector",
    List = playerOptions,
    Value = playerOptions[1],
    Callback = function(selectedName)
        selectedPlayer = getPlayerByDisplayName(selectedName)
    end
})

PlayerTab:Button({
    Title = "Refresh Players",
    Desc = "Update player list",
    Callback = function()
        print("Player list refreshed")
    end
})

PlayerTab:Button({
    Title = "Teleport To Selected Player",
    Desc = "TP to chosen player",
    Callback = function()
        if selectedPlayer then
            teleportToPlayer(selectedPlayer)
        else
            print("No player selected!")
        end
    end
})

local goatersa = false

PlayerTab:Toggle({
    Title = "Attach to player",
    Desc = "Auto follow selected player",
    Value = false,
    Callback = function(state)
        if selectedPlayer then
            goatersa = state
            spawn(function()
                while goatersa do
                    teleportToPlayer(selectedPlayer)
                    task.wait(0.1)
                end
            end)
        else
            print("No player selected!")
        end
    end
})

PlayerTab:Button({
    Title = "Teleport To Random Player",
    Desc = "TP to random player",
    Callback = function()
        teleportToRandomPlayer()
    end
})

PlayerTab:Section({Title = "Combat Features"})

PlayerTab:Button({
    Title = "Hitbox multiplier",
    Desc = "Toggle hitbox size",
    Callback = function()
        if game.Workspace.Values.HitboxMultiplier.Value == 50 then
            Window:Notify({
                Title = "[HITBOX]",
                Desc = "is 1x",
                Time = 4
            })
            game.Workspace.Values.HitboxMultiplier.Value = 1
        else
            Window:Notify({
                Title = "[HITBOX]",
                Desc = "is 50x",
                Time = 4
            })
            game.Workspace.Values.HitboxMultiplier.Value = 50
        end
    end
})

-- Hitbox Expander
local isHitboxExpanderActive = false
local expandedHitboxes = {}
local visualHitboxes = {}
local hitboxSize = 15
local hitboxRange = 30
local attackCooldown = 0.2
local lastAttackTime = 0

PlayerTab:Toggle({
    Title = "Hitbox Expander",
    Desc = "Extend attack range with invisible hitboxes",
    Value = false,
    Callback = function(state)
        isHitboxExpanderActive = state
        
        if state then
            createExpandedHitboxes()
        else
            removeExpandedHitboxes()
        end
    end
})

PlayerTab:Textbox({
    Title = "Hitbox Range",
    Desc = "Set hitbox range (1-100)",
    Placeholder = "30",
    Value = "30",
    ClearTextOnFocus = false,
    Callback = function(text)
        local newRange = tonumber(text)
        if newRange and newRange >= 1 and newRange <= 100 then
            hitboxRange = newRange
            if isHitboxExpanderActive then
                removeExpandedHitboxes()
                createExpandedHitboxes()
            end
            Window:Notify({
                Title = "HITBOX EXPANDER",
                Desc = "Range set to: " .. hitboxRange .. " studs",
                Time = 3
            })
        else
            Window:Notify({
                Title = "HITBOX EXPANDER",
                Desc = "Invalid range! Use 1-100",
                Time = 3
            })
        end
    end
})

local function createSingleHitbox(character, offset, name)
    local hitbox = Instance.new("Part")
    hitbox.Name = name
    hitbox.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
    hitbox.Transparency = 1
    hitbox.CanCollide = false
    hitbox.Anchored = false
    hitbox.Massless = true
    
    local touchInterest = Instance.new("TouchTransmitter")
    touchInterest.Parent = hitbox
    
    local weld = Instance.new("Weld")
    weld.Part0 = character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Head") or character.PrimaryPart
    weld.Part1 = hitbox
    weld.C0 = CFrame.new(offset)
    weld.Parent = hitbox
    
    hitbox.Parent = character
    
    hitbox.Touched:Connect(function(otherPart)
        onHitboxTouched(otherPart)
    end)
    
    return hitbox
end

local function createVisualHitbox(character, offset, name)
    local visual = Instance.new("Part")
    visual.Name = name
    visual.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
    visual.Material = Enum.Material.Neon
    visual.BrickColor = BrickColor.new("Bright red")
    visual.Transparency = 0.7
    visual.CanCollide = false
    visual.Anchored = false
    visual.Massless = true
    
    local weld = Instance.new("Weld")
    weld.Part0 = character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Head") or character.PrimaryPart
    weld.Part1 = visual
    weld.C0 = CFrame.new(offset)
    weld.Parent = visual
    
    visual.Parent = character
    
    return visual
end

local function createSphereHitbox(character)
    local sphere = Instance.new("Part")
    sphere.Name = "RotatingSphereHitbox"
    sphere.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
    sphere.Transparency = 1
    sphere.CanCollide = false
    sphere.Anchored = false
    sphere.Massless = true
    
    local touchInterest = Instance.new("TouchTransmitter")
    touchInterest.Parent = sphere
    
    local weld = Instance.new("Weld")
    weld.Part0 = character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Head") or character.PrimaryPart
    weld.Part1 = sphere
    weld.Parent = sphere
    
    sphere.Parent = character
    
    sphere.Touched:Connect(function(otherPart)
        onHitboxTouched(otherPart)
    end)
    
    if isHitboxExpanderActive then
        coroutine.wrap(function()
            local angle = 0
            while isHitboxExpanderActive and sphere and sphere.Parent do
                angle = angle + 0.1
                local x = math.cos(angle) * hitboxRange
                local z = math.sin(angle) * hitboxRange
                weld.C0 = CFrame.new(x, 0, z)
                RunService.Heartbeat:Wait()
            end
        end)()
    end
    
    return sphere
end

local function createSphereVisual(character)
    local visual = Instance.new("Part")
    visual.Name = "RotatingSphereVisual"
    visual.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
    visual.Material = Enum.Material.Neon
    visual.BrickColor = BrickColor.new("Bright blue")
    visual.Transparency = 0.7
    visual.CanCollide = false
    visual.Anchored = false
    visual.Massless = true
    
    local weld = Instance.new("Weld")
    weld.Part0 = character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Head") or character.PrimaryPart
    weld.Part1 = visual
    weld.Parent = visual
    
    visual.Parent = character
    
    if isHitboxExpanderActive then
        coroutine.wrap(function()
            local angle = 0
            while isHitboxExpanderActive and visual and visual.Parent do
                angle = angle + 0.1
                local x = math.cos(angle) * hitboxRange
                local z = math.sin(angle) * hitboxRange
                weld.C0 = CFrame.new(x, 0, z)
                RunService.Heartbeat:Wait()
            end
        end)()
    end
    
    return visual
end

local function createExpandedHitboxes()
    removeExpandedHitboxes()
    
    local character = localPlayer.Character
    if not character then return end
    
    local hitboxPositions = {
        Vector3.new(0, 0, hitboxRange),
        Vector3.new(hitboxRange, 0, 0),
        Vector3.new(-hitboxRange, 0, 0),
        Vector3.new(0, 0, -hitboxRange),
        Vector3.new(0, hitboxRange, 0),
    }
    
    for i, offset in ipairs(hitboxPositions) do
        local hitbox = createSingleHitbox(character, offset, "Hitbox_" .. i)
        table.insert(expandedHitboxes, hitbox)
        
        local visual = createVisualHitbox(character, offset, "Visual_" .. i)
        table.insert(visualHitboxes, visual)
    end
    
    local sphereHitbox = createSphereHitbox(character)
    table.insert(expandedHitboxes, sphereHitbox)
    
    local sphereVisual = createSphereVisual(character)
    table.insert(visualHitboxes, sphereVisual)
end

local function onHitboxTouched(otherPart)
    if not isHitboxExpanderActive then return end
    
    local currentTime = tick()
    if currentTime - lastAttackTime < attackCooldown then return end
    
    local touchedPlayer = getPlayerFromPart(otherPart)
    if touchedPlayer and touchedPlayer ~= localPlayer then
        local character = touchedPlayer.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.Health > 0 then
                performAttack()
                lastAttackTime = currentTime
                flashHitboxVisual(otherPart)
            end
        end
    end
end

local function getPlayerFromPart(part)
    local character = part:FindFirstAncestorOfClass("Model")
    if character then
        return Players:GetPlayerFromCharacter(character)
    end
    return nil
end

local function performAttack()
    local currentTime = tick()
    if currentTime - lastAttackTime >= attackCooldown then
        local screenCenter = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)
        
        VirtualInputManager:SendTouchEvent(0, screenCenter, Enum.TouchState.Began, nil, 0, 0)
        task.wait(0.05)
        VirtualInputManager:SendTouchEvent(0, screenCenter, Enum.TouchState.Ended, nil, 0, 0)
        
        lastAttackTime = currentTime
    end
end

local function flashHitboxVisual(touchedPart)
    for _, visual in pairs(visualHitboxes) do
        if visual and visual.Parent then
            local originalColor = visual.BrickColor
            visual.BrickColor = BrickColor.new("Bright green")
            
            delay(0.2, function()
                if visual and visual.Parent then
                    if visual.Name == "RotatingSphereVisual" then
                        visual.BrickColor = BrickColor.new("Bright blue")
                    else
                        visual.BrickColor = BrickColor.new("Bright red")
                    end
                end
            end)
        end
    end
end

local function removeExpandedHitboxes()
    for _, hitbox in pairs(expandedHitboxes) do
        if hitbox and hitbox.Parent then
            hitbox:Destroy()
        end
    end
    expandedHitboxes = {}
    
    for _, visual in pairs(visualHitboxes) do
        if visual and visual.Parent then
            visual:Destroy()
        end
    end
    visualHitboxes = {}
end

PlayerTab:Button({
    Title = "Hitbox Status",
    Desc = "Show current hitbox range",
    Callback = function()
        Window:Notify({
            Title = "HITBOX EXPANDER",
            Desc = "Current range: " .. hitboxRange .. " studs",
            Time = 4
        })
    end
})

-- Movement Features
local infiniteJumpEnabled = false
local jumpConnection = nil

PlayerTab:Toggle({
    Title = "Infinite Jump",
    Desc = "Jump infinitely in air",
    Value = false,
    Callback = function(value)
        infiniteJumpEnabled = value

        if infiniteJumpEnabled then
            jumpConnection = UserInputService.JumpRequest:Connect(function()
                local character = localPlayer.Character
                if character then
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                end
            end)
        else
            if jumpConnection then
                jumpConnection:Disconnect()
                jumpConnection = nil
            end
        end
    end
})

local noclipEnabled = false
local noclipConnection = nil

PlayerTab:Toggle({
    Title = "Noclip",
    Desc = "Walk through walls",
    Value = false,
    Callback = function(state)
        noclipEnabled = state

        if noclipEnabled then
            noclipConnection = RunService.Stepped:Connect(function()
                if localPlayer.Character then
                    for _, part in pairs(localPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            if part.Name == "Head" or part.Name == "Torso" or part.Name == "HumanoidRootPart" or 
                                part.Name == "Left Arm" or part.Name == "Right Arm" or 
                                part.Name == "Left Leg" or part.Name == "Right Leg" or
                                part.Name == "UpperTorso" or part.Name == "LowerTorso" or
                                part.Name == "LeftUpperArm" or part.Name == "LeftLowerArm" or part.Name == "LeftHand" or
                                part.Name == "RightUpperArm" or part.Name == "RightLowerArm" or part.Name == "RightHand" or
                                part.Name == "LeftUpperLeg" or part.Name == "LeftLowerLeg" or part.Name == "LeftFoot" or
                                part.Name == "RightUpperLeg" or part.Name == "RightLowerLeg" or part.Name == "RightFoot" then
                                part.CanCollide = false
                            end
                        end
                    end
                end
            end)
        else
            if noclipConnection then
                noclipConnection:Disconnect()
                noclipConnection = nil
            end

            if localPlayer.Character then
                for _, part in pairs(localPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        if part.Name == "Head" or part.Name == "Torso" or 
                            part.Name == "Left Arm" or part.Name == "Right Arm" or 
                            part.Name == "Left Leg" or part.Name == "Right Leg" or
                            part.Name == "UpperTorso" or part.Name == "LowerTorso" or
                            part.Name == "LeftUpperArm" or part.Name == "LeftLowerArm" or part.Name == "LeftHand" or
                            part.Name == "RightUpperArm" or part.Name == "RightLowerArm" or part.Name == "RightHand" or
                            part.Name == "LeftUpperLeg" or part.Name == "LeftLowerLeg" or part.Name == "LeftFoot" or
                            part.Name == "RightUpperLeg" or part.Name == "RightLowerLeg" or part.Name == "RightFoot" then
                            part.CanCollide = true
                        end
                    end
                end
            end
        end
    end
})

-- Auto Combat Features
local isAutoAttackActive = false
local autoAttackLoop = nil
local lastAttackTime2 = 0
local attackCooldown2 = 0.1
local isHoldingShift = false

PlayerTab:Toggle({
    Title = "Auto Attack",
    Desc = "Auto move to nearest player and attack",
    Value = false,
    Callback = function(state)
        isAutoAttackActive = state
        
        if state then
            Window:Notify({
                Title = "AUTO ATTACK",
                Desc = "ACTIVE - Hunting enemies!",
                Time = 3
            })
            
            if autoAttackLoop then
                autoAttackLoop:Disconnect()
            end
            
            autoAttackLoop = RunService.Heartbeat:Connect(function()
                if not isAutoAttackActive then return end
                autoAttackRoutine()
            end)
            
        else
            Window:Notify({
                Title = "AUTO ATTACK",
                Desc = "INACTIVE",
                Time = 3
            })
            releaseShift()
            if autoAttackLoop then
                autoAttackLoop:Disconnect()
                autoAttackLoop = nil
            end
        end
    end
})

function holdShift()
    if not isHoldingShift then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.LeftShift, false, game)
        isHoldingShift = true
    end
end

function releaseShift()
    if isHoldingShift then
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.LeftShift, false, game)
        isHoldingShift = false
    end
end

function autoAttackRoutine()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character then 
        releaseShift()
        return 
    end
    
    local humanoid = character:FindFirstChild("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not rootPart or humanoid.Health <= 0 then 
        releaseShift()
        return 
    end
    
    local nearestPlayer, nearestDistance = findNearestPlayer()
    
    if nearestPlayer and nearestDistance then
        if nearestDistance <= 8 then
            releaseShift()
            if tick() - lastAttackTime2 >= attackCooldown2 then
                performAttack2()
                lastAttackTime2 = tick()
            end
        else
            holdShift()
            moveToPlayer(nearestPlayer, rootPart, humanoid)
        end
    else
        releaseShift()
        Window:Notify({
            Title = "SEARCHING",
            Desc = "No targets found",
            Time = 2
        })
    end
end

function findNearestPlayer()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character then return nil, math.huge end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return nil, math.huge end
    
    local nearestPlayer = nil
    local nearestDistance = math.huge
    
    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character then
            local otherRoot = otherPlayer.Character:FindFirstChild("HumanoidRootPart")
            local otherHumanoid = otherPlayer.Character:FindFirstChild("Humanoid")
            
            if otherRoot and otherHumanoid and otherHumanoid.Health > 0 then
                local distance = (rootPart.Position - otherRoot.Position).Magnitude
                
                if distance < nearestDistance then
                    nearestDistance = distance
                    nearestPlayer = otherPlayer
                end
            end
        end
    end
    
    return nearestPlayer, nearestDistance
end

function moveToPlayer(targetPlayer, rootPart, humanoid)
    if not targetPlayer or not targetPlayer.Character then 
        releaseShift()
        return 
    end
    
    local targetRoot = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not targetRoot then 
        releaseShift()
        return 
    end
    
    local direction = (targetRoot.Position - rootPart.Position).Unit
    humanoid:MoveTo(targetRoot.Position)
    rootPart.CFrame = CFrame.new(rootPart.Position, Vector3.new(targetRoot.Position.X, rootPart.Position.Y, targetRoot.Position.Z))
    
    local distance = (rootPart.Position - targetRoot.Position).Magnitude
    if distance <= 6 then
        releaseShift()
    end
end

function performAttack2()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character then return end
    
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid then return end
    
    releaseShift()
    
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 1)
    wait(0.05)
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 1)
    
    local attackKeys = {Enum.KeyCode.E, Enum.KeyCode.F, Enum.KeyCode.Q, Enum.KeyCode.R, Enum.KeyCode.Space}
    
    for _, key in pairs(attackKeys) do
        VirtualInputManager:SendKeyEvent(true, key, false, game)
        wait(0.03)
        VirtualInputManager:SendKeyEvent(false, key, false, game)
        wait(0.02)
    end
    
    Window:Notify({
        Title = "ATTACKING!",
        Desc = "Auto-attack executed!",
        Time = 1
    })
end

-- GAME TAB CONTENT
GameTab:Section({Title = "Red Light Green Light"})

GameTab:Button({
    Title = "RLGL - Teleport To End",
    Desc = "Teleport to finish line",
    Callback = function()
        local char = localPlayer.Character
        char.HumanoidRootPart.CFrame = CFrame.new(-46.0587921, 1025.23352, 108.6353122)
    end
})

GameTab:Button({
    Title = "RLGL - Teleport To Start",
    Desc = "Teleport to start line",
    Callback = function()
        local char = localPlayer.Character
        char.HumanoidRootPart.CFrame = CFrame.new(-48.5137215, 1024.521, -492.023163)
    end
})

local NEVERAURA = false
local MAYBEAURA = false

GameTab:Toggle({
    Title = "ANTI SHOT!!",
    Desc = "Anti-shot protection",
    Value = false,
    Callback = function(state)
        MAYBEAURA = state
        local char = localPlayer.Character
        while MAYBEAURA do
            char.Parent = workspace.Live.GreenPlayers
            if char:FindFirstChild("MovedRecentlyRedLight") then
                char.SafeRedLightGreenLight:Destroy()
            end
            if char:FindFirstChild("SafeRedLightGreenLight") then
                char.SafeRedLightGreenLight:Destroy()
            end

            local folder = Instance.new("Folder")
            folder.Parent = char
            folder.Name = "SafeRedLightGreenLight"
            task.wait()
        end
    end
})

GameTab:Toggle({
    Title = "RLGL - Auto Help",
    Desc = "Auto help system",
    Value = false,
    Callback = function(state)
        NEVERAURA = state
    end
})

GameTab:Section({Title = "Dalgona"})

GameTab:Button({
    Title = "Auto Cookie",
    Desc = "Auto complete cookie game",
    Callback = function()
        local Module = game.ReplicatedStorage.Modules.Games.DalgonaClient
        for _, f in ipairs(debug.getregistry()) do
            if typeof(f) == "function" and islclosure(f) then
                if getfenv(f).script == Module then
                    if debug.getinfo(f).nups == 76 then
                        setupvalue(f, 33, 9e9)
                        setupvalue(f, 34, 9e9)
                        break
                    end
                end
            end
        end
    end
})

GameTab:Section({Title = "Final Dinner / HNS"})

GameTab:Button({
    Title = "Final Dinner - Teleport To Safe Spot",
    Desc = "Teleport to safe location",
    Callback = function()
        local char = localPlayer.Character or localPlayer.CharacterAdded:Wait()
        if char and char:FindFirstChild("HumanoidRootPart") then
            char.HumanoidRootPart.CFrame = CFrame.new(182.413818, 121.033997, -93.8286514)
        end
    end
})

-- ESP System
local espSeekersEnabled = false
local espHidersEnabled = false

local function isSeeker(player)
    if not player then return false end

    if player.Character and player.Character:FindFirstChild("Knife") then
        return true
    end

    local backpack = player:FindFirstChild("Backpack")
    if backpack and backpack:FindFirstChild("Knife") then
        return true
    end

    return false
end

local function createBox(character, color)
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end

    local existingBox = character:FindFirstChild("ESPBox")
    if existingBox then
        existingBox:Destroy()
    end

    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChild("Humanoid")

    local targetPart = humanoidRootPart
    if humanoid then
        if humanoid.RigType == Enum.HumanoidRigType.R6 then
            targetPart = character:FindFirstChild("Torso") or humanoidRootPart
        else
            targetPart = character:FindFirstChild("LowerTorso") or humanoidRootPart
        end
    end

    local boxGui = Instance.new("BillboardGui")
    boxGui.Name = "ESPBox"
    boxGui.Parent = character
    boxGui.Size = UDim2.new(4, 0, 6, 0)
    boxGui.StudsOffset = Vector3.new(0, 0, 0)
    boxGui.Adornee = targetPart
    boxGui.AlwaysOnTop = true
    boxGui.ZIndexBehavior = Enum.ZIndexBehavior.Global

    local containerFrame = Instance.new("Frame")
    containerFrame.Parent = boxGui
    containerFrame.Size = UDim2.new(1, 0, 1, 0)
    containerFrame.BackgroundTransparency = 1

    local edges = {
        {UDim2.new(1, 0, 0, 2), UDim2.new(0, 0, 0, 0)},
        {UDim2.new(1, 0, 0, 2), UDim2.new(0, 0, 1, -2)},
        {UDim2.new(0, 2, 1, 0), UDim2.new(0, 0, 0, 0)},
        {UDim2.new(0, 2, 1, 0), UDim2.new(1, -2, 0, 0)}
    }

    for _, data in ipairs(edges) do
        local edge = Instance.new("Frame")
        edge.Parent = containerFrame
        edge.Size = data[1]
        edge.Position = data[2]
        edge.BackgroundColor3 = color
        edge.BorderSizePixel = 0
    end
end

local function removeBox(character)
    if not character then return end
    local box = character:FindFirstChild("ESPBox")
    if box then
        box:Destroy()
    end
end

local function updatePlayerESP(player)
    if not player or player == localPlayer then return end
    if not player.Character then return end

    local isSeekerRole = isSeeker(player)

    if (isSeekerRole and espSeekersEnabled) then
        createBox(player.Character, Color3.new(1, 0, 0))
    elseif (not isSeekerRole and espHidersEnabled) then
        createBox(player.Character, Color3.new(0, 0, 1))
    else
        removeBox(player.Character)
    end
end

local function updateAllESP()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer then
            updatePlayerESP(player)
        end
    end
end

GameTab:Toggle({
    Title = "ESP Seekers",
    Desc = "Show seeker ESP",
    Value = false,
    Callback = function(state)
        espSeekersEnabled = state
        updateAllESP()
    end
})

GameTab:Toggle({
    Title = "ESP Hiders",
    Desc = "Show hider ESP",
    Value = false,
    Callback = function(state)
        espHidersEnabled = state
        updateAllESP()
    end
})

GameTab:Button({
    Title = "HNS - ESP Exit",
    Desc = "Highlight exit doors",
    Callback = function()
        for i, floor1doors in pairs(game.Workspace.HideAndSeekMap.NEWFIXEDDOORS.Floor1.EXITDOORS:GetChildren()) do
            Instance.new("Highlight", floor1doors)
        end
        for i, floor2doors in pairs(game.Workspace.HideAndSeekMap.NEWFIXEDDOORS.Floor2.EXITDOORS:GetChildren()) do
            Instance.new("Highlight", floor2doors)
        end
        for i, floor3doors in pairs(game.Workspace.HideAndSeekMap.NEWFIXEDDOORS.Floor3.EXITDOORS:GetChildren()) do
            Instance.new("Highlight", floor3doors)
        end
    end
})

GameTab:Button({
    Title = "HNS - Delete The Spikes",
    Desc = "Remove killing parts",
    Callback = function()
        game.Workspace.HideAndSeekMap.KillingParts:Destroy()
    end
})

GameTab:Section({Title = "Tug of War"})

local tugOfWarAutoEnabled = false
local tugOfWarAutoThread = nil
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remote = ReplicatedStorage.Remotes:WaitForChild("TemporaryReachedBindable")
local VALID_PULL_DATA = { { IHateYou = true } }

GameTab:Toggle({
    Title = "Tug of War Auto",
    Desc = "Auto tug of war",
    Value = false,
    Callback = function(Value)
        tugOfWarAutoEnabled = Value
        if Value then
            if tugOfWarAutoThread then return end
            tugOfWarAutoThread = task.spawn(function()
                while tugOfWarAutoEnabled do
                    Remote:FireServer(unpack(VALID_PULL_DATA))
                    task.wait(0.025)
                end
                tugOfWarAutoThread = nil
            end)
        else
            tugOfWarAutoEnabled = false
            if tugOfWarAutoThread then
                task.cancel(tugOfWarAutoThread)
                tugOfWarAutoThread = nil
            end
        end
    end
})

GameTab:Section({Title = "Jump Rope"})

GameTab:Button({
    Title = "Jump Rope - Teleport To End",
    Desc = "Teleport to finish",
    Callback = function()
        local char = localPlayer.Character or localPlayer.CharacterAdded:Wait()
        if char and char:FindFirstChild("HumanoidRootPart") then
            char.HumanoidRootPart.CFrame = CFrame.new(720.896057, 198.628311, 921.170654)
        end
    end
})

GameTab:Button({
    Title = "Jump Rope - Delete The Rope",
    Desc = "Remove jump rope",
    Callback = function()
        game.Workspace.Effects.rope:Destroy()
    end
})

GameTab:Section({Title = "Glass Bridge"})

GameTab:Button({
    Title = "Glass Bridge - Teleport To End",
    Desc = "Teleport to finish",
    Callback = function()
        local char = localPlayer.Character or localPlayer.CharacterAdded:Wait()
        if char and char:FindFirstChild("HumanoidRootPart") then
            char.HumanoidRootPart.CFrame = CFrame.new(-196.372467, 522.192139, -1534.20984)
        end
    end
})

GameTab:Button({
    Title = "Glass Bridge Fake Glass",
    Desc = "Create glass bridge cover",
    Callback = function()
        CreateGlassBridgeCover()
    end
})

GameTab:Button({
    Title = "Glass Esp",
    Desc = "Highlight glass types",
    Callback = function()
        local GlassHolder = workspace:WaitForChild("GlassBridge"):WaitForChild("GlassHolder")

        for i, v in pairs(GlassHolder:GetChildren()) do
            for g, j in pairs(v:GetChildren()) do
                if j:IsA("Model") and j.PrimaryPart then
                    local Color = j.PrimaryPart:GetAttribute("exploitingisevil") 
                        and Color3.fromRGB(248, 87, 87) 
                        or Color3.fromRGB(28, 235, 87)
                    j.PrimaryPart.Color = Color
                    j.PrimaryPart.Transparency = 0
                    j.PrimaryPart.Material = Enum.Material.Neon
                end
            end
        end
    end
})

GameTab:Section({Title = "ALL Games"})

local AURAGAINER = false

GameTab:Toggle({
    Title = "Auto Win",
    Desc = "Auto win current game",
    Value = false,
    Callback = function(state)
        AURAGAINER = state
        local values = game.Workspace.Values
        local char = localPlayer.Character

        while AURAGAINER do
            task.wait(0.05)
            if values.CurrentGame.Value == "RedLightGreenLight" then
                char.HumanoidRootPart.CFrame = CFrame.new(-46.0587921, 1025.23352, 108.6353122)
            elseif values.CurrentGame.Value == "Dalgona" then
                -- Dalgona handling
            elseif values.CurrentGame.Value == "TugOfWar" then
                -- Tug of war handling
            elseif values.CurrentGame.Value == "LightsOut" then
                char.HumanoidRootPart.CFrame = CFrame.new(294.185852, 55.7636185, -3.9290698)
            elseif values.CurrentGame.Value == "HideAndSeek" then
                if localPlayer.Backpack:FindFirstChild("Knife") or char:FindFirstChild("Knife") then
                    local Splayer = math.random(1, #Players)
                    local Selected = Players[Splayer]

                    while Selected.Backpack:FindFirstChild("Knife") or char:FindFirstChild("Knife") do
                        Splayer = math.random(1, #Players)
                        Selected = Players[Splayer]
                    end
                    -- performLoopkill(Splayer)
                else
                    char.HumanoidRootPart.CFrame = CFrame.new(196.83342, 55.9547985, -90.4745865)
                end
            elseif values.CurrentGame.Value == "JumpRope" then
                char.HumanoidRootPart.CFrame = CFrame.new(720.896057, 198.628311, 921.170654)
            elseif values.CurrentGame.Value == "GlassBridge" then
                char.HumanoidRootPart.CFrame = CFrame.new(-196.372467, 522.192139, -1534.20984)
            elseif values.CurrentGame.Value == "Mingle" then
                char.HumanoidRootPart.CFrame = CFrame.new(1170.68262, 403.950592, -486.154968)
            elseif values.CurrentGame.Value == "SkySquidGame" then
                char.HumanoidRootPart.CFrame = CFrame.new(2730.44263,1043.33435,800.130554)
            end
        end
    end
})

-- MISC TAB CONTENT
MiscTab:Section({Title = "TELEPORTS"})

MiscTab:Button({
    Title = "Teleport To Spawn",
    Desc = "Return to spawn point",
    Callback = function()
        local char = localPlayer.Character
        if char and char:FindFirstChild("HumanoidRootPart") then
            char.HumanoidRootPart.CFrame = CFrame.new(196.83342, 55.9547985, -90.4745865)
        end
    end
})

MiscTab:Button({
    Title = "Teleport To Safe Spot",
    Desc = "Teleport to safe location",
    Callback = function()
        local char = localPlayer.Character or localPlayer.CharacterAdded:Wait()
        if char and char:FindFirstChild("HumanoidRootPart") then
            char.HumanoidRootPart.CFrame = CFrame.new(179.030807, 57.9083214, 49.8269196)
        end
    end
})

MiscTab:Section({Title = "SpamX TITLES"})

MiscTab:Button({
    Title = "[DAHEN HUB] Black Title",
    Desc = "Set black title",
    Callback = function()
        localPlayer:SetAttribute("_CurrentTitle", "Him")
        spawn(function()
            while task.wait() do
                localPlayer.Character.Torso.Player_Nametag.TitleText.Text = "[DAHEN SCRIPT]"
            end
        end)
    end
})

MiscTab:Button({
    Title = "[DAHEN HUB] Gold Title",
    Desc = "Set gold title",
    Callback = function()
        localPlayer:SetAttribute("_CurrentTitle", "Rich Millionaire")
        spawn(function()
            while task.wait() do
                localPlayer.Character.Torso.Player_Nametag.TitleText.Text = "[SpamX USER]"
            end
        end)
    end
})

MiscTab:Button({
    Title = "[DAHEN HUB] Purple Title",
    Desc = "Set purple title",
    Callback = function()
        localPlayer:SetAttribute("_CurrentTitle", "Tanos")
        spawn(function()
            while task.wait() do
                localPlayer.Character.Torso.Player_Nametag.TitleText.Text = "[SpamX USER]"
            end
        end)
    end
})

MiscTab:Button({
    Title = "[DAHEN HUB] Red Title",
    Desc = "Set red title",
    Callback = function()
        localPlayer:SetAttribute("_CurrentTitle", "The Chosen One")
        spawn(function()
            while task.wait() do
                localPlayer.Character.Torso.Player_Nametag.TitleText.Text = "[DAHEN SCRIPT ]"
            end
        end)
    end
})

MiscTab:Section({Title = "ITEM TELEPORTS"})

local teleportEnabled = false
local teleportConnection = nil

MiscTab:Toggle({
    Title = "Auto Grab Dropped Bandage",
    Desc = "Auto collect bandages",
    Value = false,
    Callback = function(state)
        teleportEnabled = state

        if teleportEnabled then
            teleportConnection = RunService.Heartbeat:Connect(function()
                if not teleportEnabled then return end

                local char = localPlayer.Character
                if char and char:FindFirstChild("HumanoidRootPart") then
                    local droppedBandage = game.Workspace.Effects:FindFirstChild("DroppedBandage")
                    if droppedBandage and droppedBandage.PrimaryPart then
                        char.HumanoidRootPart.CFrame = droppedBandage.PrimaryPart.CFrame
                    end
                end
            end)
        else
            if teleportConnection then
                teleportConnection:Disconnect()
                teleportConnection = nil
            end
        end
    end
})

local grenadeEnabled = false
local grenadeConnection = nil

MiscTab:Toggle({
    Title = "Auto Grab Dropped Grenade",
    Desc = "Auto collect grenades",
    Value = false,
    Callback = function(state)
        grenadeEnabled = state

        if grenadeEnabled then
            grenadeConnection = RunService.Heartbeat:Connect(function()
                if not grenadeEnabled then return end

                local char = localPlayer.Character
                if char and char:FindFirstChild("HumanoidRootPart") then
                    local droppedGrenade = game.Workspace.Effects:FindFirstChild("DroppedGrenade")
                    if droppedGrenade and droppedGrenade.PrimaryPart then
                        char.HumanoidRootPart.CFrame = droppedGrenade.PrimaryPart.CFrame
                    end
                end
            end)
        else
            if grenadeConnection then
                grenadeConnection:Disconnect()
                grenadeConnection = nil
            end
        end
    end
})

local flashbangEnabled = false
local flashbangConnection = nil

MiscTab:Toggle({
    Title = "Auto Grab Dropped FlashBang",
    Desc = "Auto collect flashbangs",
    Value = false,
    Callback = function(state)
        flashbangEnabled = state

        if flashbangEnabled then
            flashbangConnection = RunService.Heartbeat:Connect(function()
                if not flashbangEnabled then return end

                local char = localPlayer.Character
                if char and char:FindFirstChild("HumanoidRootPart") then
                    local droppedFlashbang = game.Workspace.Effects:FindFirstChild("DroppedFlashbang")
                    if droppedFlashbang and droppedFlashbang.PrimaryPart then
                        char.HumanoidRootPart.CFrame = droppedFlashbang.PrimaryPart.CFrame
                    end
                end
            end)
        else
            if flashbangConnection then
                flashbangConnection:Disconnect()
                flashbangConnection = nil
            end
        end
    end
})

MiscTab:Section({Title = "OTHER FEATURES"})

MiscTab:Toggle({
    Title = "Enable Spectate",
    Desc = "Enable spectate mode",
    Value = false,
    Callback = function(state)
        game.Workspace.Values.CanSpectateIfWonGame.Value = state
    end
})

MiscTab:Textbox({
    Title = "Custom Player Number",
    Desc = "Put Tag Here",
    Placeholder = "Enter custom number...",
    Value = "",
    ClearTextOnFocus = false,
    Callback = function(value)
        local char = localPlayer.Character
        local ui = localPlayer.PlayerGui.Leaderboard.Leaderboard.MainLeaderboard.Content:FindFirstChild(localPlayer.UserId)
        local Tags = char:FindFirstChild("PlayerTags")

        spawn(function()
            while true do
                task.wait()
                for i, tag in pairs(Tags:GetChildren()) do
                    tag.SurfaceGui.TextLabel.Text = value
                    ui.PlayerNumber.Text = "#"..value
                end
            end
        end)
    end
})

MiscTab:Button({
    Title = "FPS Boost",
    Desc = "Optimize game performance",
    Callback = function()
        local Lighting = game:GetService("Lighting")
        Lighting.GlobalShadows = false
        Lighting.FogEnd = 100000
        Lighting.Brightness = 1

        for _, v in pairs(workspace:GetDescendants()) do
            if v:IsA("BasePart") then
                v.Material = Enum.Material.SmoothPlastic
            end
        end
    end
})

-- Initialize ESP system
local function setupPlayer(player)
    if player == localPlayer then return end

    player.CharacterAdded:Connect(function(character)
        task.wait(0.5)
        updatePlayerESP(player)
    end)

    if player.Character then
        player.Character.ChildAdded:Connect(function(child)
            if child.Name == "Knife" then
                task.wait(0.1)
                updatePlayerESP(player)
            end
        end)

        player.Character.ChildRemoved:Connect(function(child)
            if child.Name == "Knife" then
                task.wait(0.1)
                updatePlayerESP(player)
            end
        end)
    end

    local backpack = player:FindFirstChild("Backpack")
    if backpack then
        backpack.ChildAdded:Connect(function(child)
            if child.Name == "Knife" then
                task.wait(0.1)
                updatePlayerESP(player)
            end
        end)

        backpack.ChildRemoved:Connect(function(child)
            if child.Name == "Knife" then
                task.wait(0.1)
                updatePlayerESP(player)
            end
        end)
    end
end

local function initializeESP()
    for _, player in ipairs(Players:GetPlayers()) do
        setupPlayer(player)
    end

    Players.PlayerAdded:Connect(setupPlayer)

    Players.PlayerRemoving:Connect(function(player)
        if player.Character then
            removeBox(player.Character)
        end
    end)
end

initializeESP()

-- Clean up connections
localPlayer.CharacterAdded:Connect(function()
    if jumpConnection then
        jumpConnection:Disconnect()
        jumpConnection = nil
    end
    if noclipConnection then
        noclipConnection:Disconnect()
        noclipConnection = nil
    end
    if autoAttackLoop then
        autoAttackLoop:Disconnect()
        autoAttackLoop = nil
    end
end)

Window:Notify({
    Title = "DAHEN HUB",
    Desc = "All components loaded successfully!",
    Time = 4
})

print("DAHEN HUB LOADED")			
